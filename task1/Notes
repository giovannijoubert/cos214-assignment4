QUESTION 1 =========
1. 

g++ -g marks.cpp
./a.out

Output : Floating point exception (core dumped)

2. gdb a.out


3. run

Error: Arithmetic exception
Line: 17	    return ((double)(a / b)) * 100;
Values of function arguments: (a=-2, b=0)

4. list

12	    return 0;
13	 }
14	
15	 int improve(int a, int b)
16	{
17	    return ((double)(a / b)) * 100;
18	 } 

5. backtrace

#0  0x000055555555483d in improve (a=-2, b=0) at marks.cpp:17
#1  0x000055555555481a in main () at marks.cpp:11

Line 11 calls improve with (a=-2, b=0) resulting in line 17 to devide by 0

6. up 1

7. list

6	
7	 int main() {
8	    int mark = 59, highest = 87;
9	    cout << improve(mark, highest);
10	    mark = -2; highest = 0;
11	    cout << improve(mark, highest);
12	    return 0;
13	 }
14	
15	 int improve(int a, int b)

8. print highest

output: 0

9. division by 0

QUESTION 2 =========

1. g++ -g capture.cpp

2. valgrind --leak-check=yes ./a.out

Output:

==22737== Memcheck, a memory error detector
==22737== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==22737== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==22737== Command: ./a.out
==22737== 
==22737== Invalid write of size 4
==22737==    at 0x108698: capture() (capture.cpp:4)
==22737==    by 0x1086A9: main (capture.cpp:9)
==22737==  Address 0x5b7dca8 is 0 bytes after a block of size 40 alloc'd
==22737==    at 0x4C3089F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==22737==    by 0x10868B: capture() (capture.cpp:3)
==22737==    by 0x1086A9: main (capture.cpp:9)
==22737== 
==22737== 
==22737== HEAP SUMMARY:
==22737==     in use at exit: 40 bytes in 1 blocks
==22737==   total heap usage: 2 allocs, 1 frees, 72,744 bytes allocated
==22737== 
==22737== 40 bytes in 1 blocks are definitely lost in loss record 1 of 1
==22737==    at 0x4C3089F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==22737==    by 0x10868B: capture() (capture.cpp:3)
==22737==    by 0x1086A9: main (capture.cpp:9)
==22737== 
==22737== LEAK SUMMARY:
==22737==    definitely lost: 40 bytes in 1 blocks
==22737==    indirectly lost: 0 bytes in 0 blocks
==22737==      possibly lost: 0 bytes in 0 blocks
==22737==    still reachable: 0 bytes in 0 blocks
==22737==         suppressed: 0 bytes in 0 blocks
==22737== 
==22737== For counts of detected and suppressed errors, rerun with: -v
==22737== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)


3. process ID: ==22737==

4. Invalid write of size 4

5. Trying to assign to a memory address that has 0 space allocated to it (out of bounds)

6. Allocated with new but never freed. Does not get freed in default destructor.

7. Free the allocated memory with a destructor.

